package net.smartgst.returns.gstr1;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.JsonNode;
import com.mashape.unirest.http.Unirest;
import net.smartgst.auth.AESEncryption;
import net.smartgst.auth.GSTAuth;
import net.smartgst.auth.GSTCredential;
import net.smartgst.returns.gstr1.data.*;
import org.aeonbits.owner.ConfigFactory;
import org.bouncycastle.crypto.digests.SHA256Digest;
import org.bouncycastle.crypto.macs.HMac;
import org.bouncycastle.crypto.params.KeyParameter;
import org.json.JSONObject;

import java.io.InputStream;
import java.text.SimpleDateFormat;
import java.util.*;

/**
 * Created by gowthaman on 27/11/16.
 */
public class Main {

    //random User Name
    private static final String USER_NAME = "Build365.TN.1";
    //random Trx Id
    private static final String TXN = new Random().nextInt(10000) + "";

    //hard coded state code
    private static final String STATE_CD = "33";


    //hard coded for now
    private static final String IP_USR = "192.168.1.1";

    //hard coded
    public static final String GSTIN = "33GSPTN1381G1Z9";


    public static void main(String[] args) throws Exception {
        InputStream pubKeyInpStream = Thread.currentThread()
                .getContextClassLoader()
                .getResourceAsStream("GSTN_G2A_SANDBOX_UAT_public.cer");

        GSTCredential gstCredential = ConfigFactory.create(GSTCredential.class);
        gstAuth = new GSTAuth(
                gstCredential,
                USER_NAME, STATE_CD, IP_USR,
                TXN, pubKeyInpStream);

        if (gstAuth.otpRequest()) {
            System.out.println("OTP Request Success");
            System.out.println("Enter OTP");
            String otp = new Scanner(System.in).nextLine();
            System.out.println("Sending OTP " + otp);
            if (gstAuth.authTokenRequest(otp.trim())) {
                System.out.println("Auth Token Success");


                GSTR1 gstr1 = new GSTR1();
                gstr1.gstin = GSTIN;

                //todo replace with Non Deprecated function
                gstr1.financialPeriod = new Date();
                gstr1.prevYearGrossTurnOver = 1015000.00;

                InvLineItem li = new InvLineItem();
                li.slNo = 1;
                li.action = null;
                li.goodsOrService = GoodsService.SERVICE;
                li.goodsOrServiceCode = "S1991";
                li.taxableValue = 1000;
                li.igstRate = 5.0;
                li.igstAmt = 50.0;

                li.cgstRate = 5.0;
                li.cgstAmt = 50.0;

                li.sgstRate = 5.0;
                li.sgstAmt = 50.0;

                li.csRate = 2.0;
                li.csAmt = 20.0;


                Invoice i = new Invoice();
                i.checkSum = ""; //will be generated by GST System
                i.items = new ArrayList<InvLineItem>() {{
                    add(li);
                }};

                i.supplierInvNum = "INV001";
                i.supplierInvDt = new Date();
                i.supplierInvVal = 1150.00;
                i.pos = "01";
                i.reverseCharge = false;
                i.provisionalAssessment = true;


                B2B b2b = new B2B();
                b2b.partyGSTIN = "33GSPTN1382G1Z8";
                b2b.invoices = new ArrayList<Invoice>() {{
                    add(i);
                }};
                gstr1.b2b = new ArrayList<>();
                gstr1.b2b.add(b2b);

                postGstr1(gstr1, gstCredential);
            }
        }

    }

    private static GSTAuth gstAuth;
    private static final ObjectMapper objectMapper = new ObjectMapper();
    private static final String BASE_URL = "http://devapi.gstsystem.co.in";
    private static final String GSTR1_PATH = "/taxpayerapi/v0.2/returns/gstr1";
    private static final String APPLICATION_JSON = "application/json";

    private static boolean postGstr1(GSTR1 gstr1, GSTCredential gstCredential) throws Exception {
        //actual payload
        String json = objectMapper.writeValueAsString(gstr1);
        System.out.println("Posting Json");
        System.out.println(json);
        AESEncryption aesEncryption = gstAuth.getAesEncryption();

        //convery payload to Base64
        byte[] jsonBase64 = Base64.getEncoder().encode(json.getBytes());

        //encrypt the Base64 data
        String encryptedPayload = aesEncryption.encryptEK(jsonBase64, gstAuth.getAuthSEK());


        //create hmac
        HMac hmac = new HMac(new SHA256Digest());
        byte[] resBuf = new byte[hmac.getMacSize()];

        //init with the AuthSEK
        hmac.init(new KeyParameter(gstAuth.getAuthSEK()));
        //add the json(Base64)
        hmac.update(jsonBase64, 0, jsonBase64.length);
        hmac.doFinal(resBuf, 0);


        JSONObject object = new JSONObject();
        object.put("action", "RETSAVE");
        object.put("data", encryptedPayload);

        //send hmac in base64 string format
        object.put("hmac", new String(Base64.getEncoder().encode(resBuf)));

        System.out.println(object.toString());

        HttpResponse<JsonNode> resp = Unirest.put(String.format("%s/%s", BASE_URL, GSTR1_PATH))
                .header("Content-Type", APPLICATION_JSON)
                .header("state-cd", STATE_CD)
                .header("gstin", gstr1.gstin)
                .header("clientid", gstCredential.clientId())
                .header("client-secret", gstCredential.clientSecret())
                .header("ip-usr", IP_USR)
                .header("username", USER_NAME)
                .header("auth-token", gstAuth.getAuthToken())
                .header("app_key", gstAuth.getAppKeyEncryptedAndCoded())
                .header("txn", TXN)
                .header("ret_period", new SimpleDateFormat("MMyyyy").format(new Date()))
                .body(new JsonNode(object.toString()))
                .asJson();

        System.out.println(resp.getStatus());
        System.out.println(resp.getBody());

        JSONObject gstrRespObj = resp.getBody().getObject();
        String status = gstrRespObj.getString("status_cd");
        if (status.equals("0")) {
            System.err.println("Error In Save");
            return false;
        }
        String data = gstrRespObj.getString("data");
        String rek = gstrRespObj.getString("rek");

        //recover apiEncryptionKey from Response using our AuthSEK
        byte[] apiEK = aesEncryption.decrypt(rek, gstAuth.getAuthSEK());

        //using the apiEncryptionKey, recover the Json data (in base64 fmt)
        String respJsoninBase64 = new String(aesEncryption.decrypt(data, apiEK));

        //convert base64 to original json (in bytes)
        byte[] respJsonInBytes = aesEncryption.decodeBase64StringTOByte(respJsoninBase64);

        //convery original json in bytes to json string
        String jsonData = new String(respJsonInBytes);
        System.out.println(jsonData);

        return true;
    }

}


